#!/bin/sh
#|-*- mode:lisp -*-|#
#| A simple playback tool using the simple API
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (load "../cl-pulseaudio.asd")
  #+quicklisp (ql:quickload '(:cl-pulseaudio :osicat) :silent t))

(defpackage :ros.script.pacat-simple.3697584773
  (:use :cl :pulseaudio :cffi))
(in-package :ros.script.pacat-simple.3697584773)
(defconstant +BUFSIZE+ 1024)

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((nul (null-pointer))
        r s (ret 1))
    (with-foreign-objects ((err :int)
                           (buf :unsigned-char +BUFSIZE+)
                           (ss '(:struct pa_sample_spec))) ;; The sample type to use
      (with-foreign-slots ((pa_sample_spec-format
                            pa_sample_spec-rate
                            pa_sample_spec-channels) ss (:struct pa_sample_spec))
        (setf pa_sample_spec-format PA_SAMPLE_S16LE
              pa_sample_spec-rate 44100
              pa_sample_spec-channels 2
              ;; Create a new playback stream
              s (pa-simple-new nul (file-namestring *load-pathname*) PA_STREAM_PLAYBACK  nul "playback" ss nul nul err)))
      (tagbody
         (when (null-pointer-p s)
           (format *error-output* "~A: pa_simple_new() failed: ~A~%" *load-pathname* (pa-strerror (mem-aref err :int)))
           (go finish))
         (when (first argv)
           ;;replace STDIN with the specified file if needed
           (let ((fd (osicat-posix:open (first argv) osicat-posix:o-rdonly)))
             (when (minusp fd)
               (format *error-output* "~A: open() failed: ~A~%" *load-pathname* (osicat-posix:strerror (mem-aref err :int)))
               (go finish))
             (when (minusp (osicat-posix:dup2 fd 0))
               (format *error-output* "~A: dup2() failed: ~A~%" *load-pathname* (osicat-posix:strerror (mem-aref err :int)))
               (go finish))
             (osicat-posix:close fd)))
       loop
         #+nil
         (let ((latency (pa_simple_get_latency s err)))
           (when (= latency -1)
             (format *error-output* "~A: pa_simple_get_latency() failed: ~A~%" *load-pathname* (pa-strerror (mem-aref err :int)))
             (go finish))
           (format *error-output* "%0.0f usec    ~A" latency #\Return))
         (setf r (osicat-posix:read 0 buf +BUFSIZE+)) ;; Read some data ...
         (when (<= r 0)
           (when (zerop r) ;; EOF
             (go break))
           (format *error-output* "~A: read() failed: ~A~%" *load-pathname* (osicat-posix:strerror (mem-aref err :int))))
         (when (< (pa-simple-write s buf r err) 0) ;; ... and play it
           (format *error-output* "~A: pa_simple_write() failed: ~A~%" *load-pathname* (pa-strerror (mem-aref err :int)))
           (go finish))
         (go loop)
       break
         (when (< (pa-simple-drain s err)  0) ;; Make sure that every single sample was played
           (format *error-output* "~A: pa_simple_drain() failed: ~A~%" *load-pathname* (pa-strerror (mem-aref err :int)))
           (go finish))
         (setf ret 0)
       finish
         (unless (null-pointer-p s)
           (pa-simple-free s))))
    ret))
;;; vim: set ft=lisp lisp:
